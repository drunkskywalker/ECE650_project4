#include <fstream>
#include <iostream>
#include <pqxx/pqxx>
#include <sstream>
#include <vector>

#include "exerciser.h"

using namespace std;
using namespace pqxx;

int main(int argc, char * argv[]) {
  //Allocate & initialize a Postgres connection object
  connection * C;

  try {
    //Establish a connection to the database
    //Parameters: database name, user name, user password
    C = new connection("dbname=ACC_BBALL user=postgres password=passw0rd");
    if (!C->is_open()) {
      cout << "Can't open database" << endl;
      return 1;
    }
  }
  catch (const std::exception & e) {
    cerr << e.what() << std::endl;
    return 1;
  }

  //TODO: create PLAYER, TEAM, STATE, and COLOR tables in the ACC_BBALL database
  //      load each table with rows from the provided source txt files
  work W(*C);

  W.exec("DROP TABLE IF EXISTS PLAYER, TEAM, STATE, COLOR;");

  W.exec("CREATE TABLE COLOR(COLOR_ID SERIAL, NAME TEXT, PRIMARY KEY(COLOR_ID));");
  W.exec("CREATE TABLE STATE(STATE_ID SERIAL, NAME TEXT, PRIMARY KEY(STATE_ID));");
  W.exec("CREATE TABLE TEAM(TEAM_ID SERIAL, NAME TEXT, STATE_ID INT, COLOR_ID INT, "
         "WINS INT, LOSSES INT, PRIMARY KEY(TEAM_ID), FOREIGN KEY (STATE_ID) REFERENCES "
         "STATE(STATE_ID), FOREIGN KEY (COLOR_ID) REFERENCES COLOR(COLOR_ID));");
  W.exec("CREATE TABLE PLAYER(PLAYER_ID SERIAL, TEAM_ID INT NOT NULL, UNIFORM_NUM "
         "INT NOT NULL, FIRST_NAME TEXT NOT NULL, LAST_NAME TEXT NOT NULL, MPG "
         "INT, PPG "
         "INT, RPG INT, APG INT, SPG DOUBLE PRECISION, BPG DOUBLE PRECISION, PRIMARY "
         "KEY(PLAYER_ID), FOREIGN "
         "KEY(TEAM_ID) REFERENCES TEAM(TEAM_ID));");
  W.commit();

  ifstream cfs("color.txt");
  string c;
  while (getline(cfs, c)) {
    add_color(C, split(c));
  }
  ifstream sfs("state.txt");
  string s;
  while (getline(sfs, s)) {
    add_state(C, split(s));
  }

  ifstream tfs("team.txt");
  string t;
  while (getline(tfs, t)) {
    add_team(C, split(t));
  }

  ifstream pfs("player.txt");
  string p;
  while (getline(pfs, p)) {
    add_player(C, split(p));
  }

  //add_player(C, 0, 0, "Abba", "Virsus", 3, 3, 3, 3, 3, 3);
  //add_player(C, split("0 0 0 BBUTa Virsusassdf 3 3 3 3 3 3"));
  //query1(C, 1, 35, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  //query2(C, "Maroon");
  //query3(C, "VirginiaTech");
  //query4(C, "NC", "Maroon");
  //query5(C, 1);
  exercise(C);
  //Close database connection
  C->disconnect();

  return 0;
}
